# Docker Compose for Trading Bot Project

name: tradebot

services:
  # Trading API Service - Provides market data, news, and technical analysis
  trading-api:
    build: 
      context: .
      dockerfile: dockerfile
    container_name: trading-api
    command: ["trading-api"]
    ports:
      - "5000:5000"
    environment:
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - FLASK_DEBUG=false
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - NEWS_BG_LOOP=true
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./TradeBot/logs:/app/TradeBot/logs
    networks:
      - tradebot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Main Trading Orchestrator - 5-minute cycle with ChatGPT + MT5 + Telegram
  trading-orchestrator:
    build: 
      context: .
      dockerfile: dockerfile
    container_name: trading-orchestrator
    command: ["trading-orchestrator"]
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - TRADING_INTERVAL_MINUTES=5
      - BACKEND_BASE_URL=http://trading-api:5000
      - TRADEBOT_API_BASE_URL=http://trading-api:5000
    env_file:
      - .env
    depends_on:
      trading-api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./TradeBot/logs:/app/TradeBot/logs
    networks:
      - tradebot-network
    restart: unless-stopped
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"


  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: trading-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./TradeBot/database:/docker-entrypoint-initdb.d
    networks:
      - tradebot-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: trading-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradebot-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local

networks:
  tradebot-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 